#!/usr/bin/env  python
# The managedeltarepos executable script.
#
# Copyright (C) 2014 Tomas Mlcoch

from __future__ import print_function

import os
import sys
import os.path
import logging
import argparse
import tempfile
import shutil
import time
import librepo
import hashlib
import createrepo_c as cr
from deltarepo.util import compute_file_checksum, isnonnegativeint, deltareposrecord_from_repopath, gen_deltarepos_file, \
    write_deltarepos_file

here = sys.path[0]
if here != '/usr/bin':
    # git checkout
    toplevel = os.path.dirname(here)
    sys.path[0] = toplevel

import deltarepo
from deltarepo import DeltaRepoError, DeltaRepoPluginError

LOG_FORMAT = "%(message)s"


def parse_options():
    parser = argparse.ArgumentParser(description="Manage deltarepos directory.",
                usage="%(prog)s --gendeltareposfile [options] <directory>\n"
                "       %(prog)s [options] <old_repo_dir> <new_repo_dir> [deltarepos_dir]")
    parser.add_argument('dirs', nargs='+')
    parser.add_argument('--debug', action="store_true", help=argparse.SUPPRESS)
    parser.add_argument("--version", action="store_true",
                      help="Show version number and quit.")
    parser.add_argument("-q", "--quiet", action="store_true",
                      help="Run in quiet mode.")
    parser.add_argument("-v", "--verbose", action="store_true",
                      help="Run in verbose mode.")
    parser.add_argument("--gendeltareposfile", action="store_true",
                     help="Generate the deltarepos.xml file. Walk recursively "
                          "all specified directories.")

    group = parser.add_argument_group("deltarepos.xml file generation (--gendeltareposfile)")
    #group.add_argument("-o", "--outputdir", action="store", metavar="DIR",
    #                  help="Set different output directory for deltarepos.xml")
    group.add_argument("--force", action="store_true",
                       help="Ignore bad repositories")

    args = parser.parse_args()

    # Error checks

    if args.version:
        return args

    if args.gendeltareposfile:
        # --gendeltareposfile
        if not args.dirs or len(args.dirs) != 1:
            parser.error("Exactly one directory must be specified")
    else:
        # default
        for dir in args.dirs:
            if not os.path.isdir(dir):
                parser.error("{0} is not a directory".format(dir))
        for dir in args.dirs[:2]:
            # Fist two arguments must be a repos
            if not os.path.isdir(os.path.join(dir, "repodata")) or \
               not os.path.isfile(os.path.join(dir, "repodata", "repomd.xml")):
                parser.error("Not a repository: %s" % dir)
        if len (args.dirs) > 3:
            parser.error("Too much directories specified")

    if args.quiet and args.verbose:
        parser.error("Cannot use quiet and verbose simultaneously!")

    #if args.outputdir and not args.gendeltareposfile:
    #    parser.error("--outputdir cannot be used")
    #elif args.outputdir and not os.path.isdir(args.outputdir):
    #    parser.error("--outputdir must be a directory: %s" % args.outputdir)

    if args.debug:
        args.verbose = True

    return args


def print_version():
    print("ManageDeltaRepos: {0} (librepo: %s)".format(
            deltarepo.VERBOSE_VERSION, librepo.VERSION))


def setup_logging(quiet, verbose):
    logger = logging.getLogger("managedeltarepos")
    formatter = logging.Formatter(LOG_FORMAT)
    logging.basicConfig(format=LOG_FORMAT)
    if quiet:
        logger.setLevel(logging.ERROR)
    elif verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    return logger


def gen_delta(old_repo_dir, new_repo_dir, logger, deltarepos_dir=None):
    # Use supplied deltarepos_dir or use the current working dir
    if not deltarepos_dir:
        deltarepos_dir = os.getcwd()

    # Gen delta to a temporary directory
    prefix = "deltarepo-{0}-".format(int(time.time()))
    tmp_dir = tempfile.mkdtemp(prefix=prefix, dir="/tmp/")
    try:
        dg = deltarepo.DeltaRepoGenerator(old_repo_dir,
                                          new_repo_dir,
                                          out_path=tmp_dir,
                                          logger=logger)
        dg.gen()
    except Exception:
        shutil.rmtree(tmp_dir)
        raise

    dst_dir = os.path.join(deltarepos_dir, os.path.basename(tmp_dir))

    # Move the delta to the deltarepos_dir or to the destination directory
    shutil.copytree(tmp_dir, dst_dir)
    shutil.rmtree(tmp_dir)

    # Prepare repo's DeltaRepoRecord
    rec = deltareposrecord_from_repopath(dst_dir, deltarepos_dir, logger)

    if rec.check():
        write_deltarepos_file(deltarepos_dir, [rec], append=True)
    else:
        logger.warning("Skipped {0}: Record is not valid".format(rec.location_href))

    return dst_dir


def main(args, logger):
    if args.gendeltareposfile:
        workdir = args.dirs[0]
        gen_deltarepos_file(workdir, logger, force=args.force)
    else:
        old_repo_dir = args.dirs[0]
        new_repo_dir = args.dirs[1]
        deltarepos_dir = args.dirs[2] if len(args.dirs) == 3 else None
        gen_delta(old_repo_dir, new_repo_dir, logger, deltarepos_dir=deltarepos_dir)


if __name__ == "__main__":
    args = parse_options()

    if args.version:
        print_version()
        sys.exit(0)

    logger = setup_logging(args.quiet, args.verbose)

    try:
        main(args, logger)
    except (DeltaRepoError, DeltaRepoPluginError) as err:
        if args.debug:
            raise
        print("Error: {0}".format(err), file=sys.stderr)
        sys.exit(1)

    sys.exit(0)


# TODO:
# - Check for contenthash mishmashes
# - Check for duplicated path (links)
